// Code generated by protoc-gen-go.
// source: MeterReader.proto
// DO NOT EDIT!

/*
Package MeterReader is a generated protocol buffer package.

It is generated from these files:
	MeterReader.proto

It has these top-level messages:
	Message
	CounterUpdate
	StartCalibration
	Settings
*/
package MeterReader

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// Modes
type Settings_SendProtocol int32

const (
	Settings_ASCII    Settings_SendProtocol = 0
	Settings_PROTOBUF Settings_SendProtocol = 1
)

var Settings_SendProtocol_name = map[int32]string{
	0: "ASCII",
	1: "PROTOBUF",
}
var Settings_SendProtocol_value = map[string]int32{
	"ASCII":    0,
	"PROTOBUF": 1,
}

func (x Settings_SendProtocol) Enum() *Settings_SendProtocol {
	p := new(Settings_SendProtocol)
	*p = x
	return p
}
func (x Settings_SendProtocol) String() string {
	return proto.EnumName(Settings_SendProtocol_name, int32(x))
}
func (x *Settings_SendProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Settings_SendProtocol_value, data, "Settings_SendProtocol")
	if err != nil {
		return err
	}
	*x = Settings_SendProtocol(value)
	return nil
}

type Settings_CommunicationChannel int32

const (
	Settings_SERIAL   Settings_CommunicationChannel = 0
	Settings_WIRELESS Settings_CommunicationChannel = 1
)

var Settings_CommunicationChannel_name = map[int32]string{
	0: "SERIAL",
	1: "WIRELESS",
}
var Settings_CommunicationChannel_value = map[string]int32{
	"SERIAL":   0,
	"WIRELESS": 1,
}

func (x Settings_CommunicationChannel) Enum() *Settings_CommunicationChannel {
	p := new(Settings_CommunicationChannel)
	*p = x
	return p
}
func (x Settings_CommunicationChannel) String() string {
	return proto.EnumName(Settings_CommunicationChannel_name, int32(x))
}
func (x *Settings_CommunicationChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Settings_CommunicationChannel_value, data, "Settings_CommunicationChannel")
	if err != nil {
		return err
	}
	*x = Settings_CommunicationChannel(value)
	return nil
}

type Settings_SamplingMode int32

const (
	Settings_ANALOG  Settings_SamplingMode = 0
	Settings_DIGITAL Settings_SamplingMode = 1
)

var Settings_SamplingMode_name = map[int32]string{
	0: "ANALOG",
	1: "DIGITAL",
}
var Settings_SamplingMode_value = map[string]int32{
	"ANALOG":  0,
	"DIGITAL": 1,
}

func (x Settings_SamplingMode) Enum() *Settings_SamplingMode {
	p := new(Settings_SamplingMode)
	*p = x
	return p
}
func (x Settings_SamplingMode) String() string {
	return proto.EnumName(Settings_SamplingMode_name, int32(x))
}
func (x *Settings_SamplingMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Settings_SamplingMode_value, data, "Settings_SamplingMode")
	if err != nil {
		return err
	}
	*x = Settings_SamplingMode(value)
	return nil
}

type Message struct {
	Update           *CounterUpdate    `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
	Calibrate        *StartCalibration `protobuf:"bytes,2,opt,name=calibrate" json:"calibrate,omitempty"`
	Settings         *Settings         `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetUpdate() *CounterUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Message) GetCalibrate() *StartCalibration {
	if m != nil {
		return m.Calibrate
	}
	return nil
}

func (m *Message) GetSettings() *Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type CounterUpdate struct {
	MeterId             *int32  `protobuf:"varint,1,req,name=meterId" json:"meterId,omitempty"`
	SeriesId            *uint32 `protobuf:"varint,2,req,name=seriesId" json:"seriesId,omitempty"`
	CurrentCounterValue *uint64 `protobuf:"varint,3,req,name=currentCounterValue" json:"currentCounterValue,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CounterUpdate) Reset()         { *m = CounterUpdate{} }
func (m *CounterUpdate) String() string { return proto.CompactTextString(m) }
func (*CounterUpdate) ProtoMessage()    {}

func (m *CounterUpdate) GetMeterId() int32 {
	if m != nil && m.MeterId != nil {
		return *m.MeterId
	}
	return 0
}

func (m *CounterUpdate) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CounterUpdate) GetCurrentCounterValue() uint64 {
	if m != nil && m.CurrentCounterValue != nil {
		return *m.CurrentCounterValue
	}
	return 0
}

type StartCalibration struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StartCalibration) Reset()         { *m = StartCalibration{} }
func (m *StartCalibration) String() string { return proto.CompactTextString(m) }
func (*StartCalibration) ProtoMessage()    {}

// Example settings structure
type Settings struct {
	// The variables of our settings
	MeterId              *int32                         `protobuf:"varint,1,req,name=meterId" json:"meterId,omitempty"`
	SeriesId             *uint32                        `protobuf:"varint,2,req,name=seriesId" json:"seriesId,omitempty"`
	SendProtocol         *Settings_SendProtocol         `protobuf:"varint,3,req,name=sendProtocol,enum=MeterReader.Settings_SendProtocol" json:"sendProtocol,omitempty"`
	CommunicationChannel *Settings_CommunicationChannel `protobuf:"varint,4,req,name=communicationChannel,enum=MeterReader.Settings_CommunicationChannel" json:"communicationChannel,omitempty"`
	SamplingMode         *Settings_SamplingMode         `protobuf:"varint,5,req,name=samplingMode,enum=MeterReader.Settings_SamplingMode" json:"samplingMode,omitempty"`
	// Analog sampling: comparator settings
	Threshold  *uint32 `protobuf:"varint,6,req,name=threshold" json:"threshold,omitempty"`
	Hysteresis *uint32 `protobuf:"varint,7,req,name=hysteresis" json:"hysteresis,omitempty"`
	// Digital sampling: edge amounts
	RisingEdgeAmounts  []uint32 `protobuf:"varint,8,rep,name=risingEdgeAmounts" json:"risingEdgeAmounts,omitempty"`
	FallingEdgeAmounts []uint32 `protobuf:"varint,9,rep,name=fallingEdgeAmounts" json:"fallingEdgeAmounts,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}

func (m *Settings) GetMeterId() int32 {
	if m != nil && m.MeterId != nil {
		return *m.MeterId
	}
	return 0
}

func (m *Settings) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *Settings) GetSendProtocol() Settings_SendProtocol {
	if m != nil && m.SendProtocol != nil {
		return *m.SendProtocol
	}
	return Settings_ASCII
}

func (m *Settings) GetCommunicationChannel() Settings_CommunicationChannel {
	if m != nil && m.CommunicationChannel != nil {
		return *m.CommunicationChannel
	}
	return Settings_SERIAL
}

func (m *Settings) GetSamplingMode() Settings_SamplingMode {
	if m != nil && m.SamplingMode != nil {
		return *m.SamplingMode
	}
	return Settings_ANALOG
}

func (m *Settings) GetThreshold() uint32 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return 0
}

func (m *Settings) GetHysteresis() uint32 {
	if m != nil && m.Hysteresis != nil {
		return *m.Hysteresis
	}
	return 0
}

func (m *Settings) GetRisingEdgeAmounts() []uint32 {
	if m != nil {
		return m.RisingEdgeAmounts
	}
	return nil
}

func (m *Settings) GetFallingEdgeAmounts() []uint32 {
	if m != nil {
		return m.FallingEdgeAmounts
	}
	return nil
}

func init() {
	proto.RegisterEnum("MeterReader.Settings_SendProtocol", Settings_SendProtocol_name, Settings_SendProtocol_value)
	proto.RegisterEnum("MeterReader.Settings_CommunicationChannel", Settings_CommunicationChannel_name, Settings_CommunicationChannel_value)
	proto.RegisterEnum("MeterReader.Settings_SamplingMode", Settings_SamplingMode_name, Settings_SamplingMode_value)
}
