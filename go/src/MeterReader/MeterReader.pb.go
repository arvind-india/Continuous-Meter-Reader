// Code generated by protoc-gen-go.
// source: MeterReader.proto
// DO NOT EDIT!

/*
Package MeterReader is a generated protocol buffer package.

It is generated from these files:
	MeterReader.proto

It has these top-level messages:
	Message
	LogMessage
	CounterUpdate
	StartCalibration
	Settings
*/
package MeterReader

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type LogMessage_Type int32

const (
	LogMessage_ERROR LogMessage_Type = 0
	LogMessage_NOTE  LogMessage_Type = 1
)

var LogMessage_Type_name = map[int32]string{
	0: "ERROR",
	1: "NOTE",
}
var LogMessage_Type_value = map[string]int32{
	"ERROR": 0,
	"NOTE":  1,
}

func (x LogMessage_Type) Enum() *LogMessage_Type {
	p := new(LogMessage_Type)
	*p = x
	return p
}
func (x LogMessage_Type) String() string {
	return proto.EnumName(LogMessage_Type_name, int32(x))
}
func (x *LogMessage_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogMessage_Type_value, data, "LogMessage_Type")
	if err != nil {
		return err
	}
	*x = LogMessage_Type(value)
	return nil
}

// Modes
type Settings_CommunicationChannel int32

const (
	Settings_SERIAL   Settings_CommunicationChannel = 0
	Settings_WIRELESS Settings_CommunicationChannel = 1
)

var Settings_CommunicationChannel_name = map[int32]string{
	0: "SERIAL",
	1: "WIRELESS",
}
var Settings_CommunicationChannel_value = map[string]int32{
	"SERIAL":   0,
	"WIRELESS": 1,
}

func (x Settings_CommunicationChannel) Enum() *Settings_CommunicationChannel {
	p := new(Settings_CommunicationChannel)
	*p = x
	return p
}
func (x Settings_CommunicationChannel) String() string {
	return proto.EnumName(Settings_CommunicationChannel_name, int32(x))
}
func (x *Settings_CommunicationChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Settings_CommunicationChannel_value, data, "Settings_CommunicationChannel")
	if err != nil {
		return err
	}
	*x = Settings_CommunicationChannel(value)
	return nil
}

type Message struct {
	Update           *CounterUpdate    `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
	Calibrate        *StartCalibration `protobuf:"bytes,2,opt,name=calibrate" json:"calibrate,omitempty"`
	Settings         *Settings         `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	Log              *LogMessage       `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetUpdate() *CounterUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Message) GetCalibrate() *StartCalibration {
	if m != nil {
		return m.Calibrate
	}
	return nil
}

func (m *Message) GetSettings() *Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Message) GetLog() *LogMessage {
	if m != nil {
		return m.Log
	}
	return nil
}

type LogMessage struct {
	Type             *LogMessage_Type `protobuf:"varint,1,req,name=type,enum=MeterReader.LogMessage_Type" json:"type,omitempty"`
	Text             *string          `protobuf:"bytes,2,req,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}

func (m *LogMessage) GetType() LogMessage_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return LogMessage_ERROR
}

func (m *LogMessage) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type CounterUpdate struct {
	MeterId             *uint32 `protobuf:"varint,1,req,name=meterId" json:"meterId,omitempty"`
	SeriesId            *uint32 `protobuf:"varint,2,req,name=seriesId" json:"seriesId,omitempty"`
	CurrentCounterValue *uint64 `protobuf:"varint,3,req,name=currentCounterValue" json:"currentCounterValue,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CounterUpdate) Reset()         { *m = CounterUpdate{} }
func (m *CounterUpdate) String() string { return proto.CompactTextString(m) }
func (*CounterUpdate) ProtoMessage()    {}

func (m *CounterUpdate) GetMeterId() uint32 {
	if m != nil && m.MeterId != nil {
		return *m.MeterId
	}
	return 0
}

func (m *CounterUpdate) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CounterUpdate) GetCurrentCounterValue() uint64 {
	if m != nil && m.CurrentCounterValue != nil {
		return *m.CurrentCounterValue
	}
	return 0
}

type StartCalibration struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StartCalibration) Reset()         { *m = StartCalibration{} }
func (m *StartCalibration) String() string { return proto.CompactTextString(m) }
func (*StartCalibration) ProtoMessage()    {}

// Example settings structure
type Settings struct {
	// The variables of our settings
	MeterId              *uint32                        `protobuf:"varint,1,req,name=meterId" json:"meterId,omitempty"`
	SeriesId             *uint32                        `protobuf:"varint,2,req,name=seriesId" json:"seriesId,omitempty"`
	CommunicationChannel *Settings_CommunicationChannel `protobuf:"varint,4,req,name=communicationChannel,enum=MeterReader.Settings_CommunicationChannel" json:"communicationChannel,omitempty"`
	// Digital sampling: edge amounts
	RisingEdgeAmounts  []uint32 `protobuf:"varint,8,rep,name=risingEdgeAmounts" json:"risingEdgeAmounts,omitempty"`
	FallingEdgeAmounts []uint32 `protobuf:"varint,9,rep,name=fallingEdgeAmounts" json:"fallingEdgeAmounts,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}

func (m *Settings) GetMeterId() uint32 {
	if m != nil && m.MeterId != nil {
		return *m.MeterId
	}
	return 0
}

func (m *Settings) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *Settings) GetCommunicationChannel() Settings_CommunicationChannel {
	if m != nil && m.CommunicationChannel != nil {
		return *m.CommunicationChannel
	}
	return Settings_SERIAL
}

func (m *Settings) GetRisingEdgeAmounts() []uint32 {
	if m != nil {
		return m.RisingEdgeAmounts
	}
	return nil
}

func (m *Settings) GetFallingEdgeAmounts() []uint32 {
	if m != nil {
		return m.FallingEdgeAmounts
	}
	return nil
}

func init() {
	proto.RegisterEnum("MeterReader.LogMessage_Type", LogMessage_Type_name, LogMessage_Type_value)
	proto.RegisterEnum("MeterReader.Settings_CommunicationChannel", Settings_CommunicationChannel_name, Settings_CommunicationChannel_value)
}
